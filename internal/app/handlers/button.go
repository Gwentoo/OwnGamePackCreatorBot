package handlers

import (
	"OwnGamePack/internal/app/utils"
	"OwnGamePack/internal/app/validators"
	"OwnGamePack/internal/storage"
	"OwnGamePack/internal/structs"
	"fmt"
	tele "gopkg.in/telebot.v3"
	"log"
)

var (
	questType      = map[string]string{"default": "–æ–±—ã—á–Ω—ã–π", "bet": "—Å–æ —Å—Ç–∞–≤–∫–æ–π", "secret": "—Å —Å–µ–∫—Ä–µ—Ç–æ–º"}
	BtnSaveTmp     = menu.Data("üìå –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞–∫", "saveTmp")
	btnViewStruct  = menu.Data("üóÇÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–∫–∞", "viewStruct")
	btnAddRound    = menu.Data("üü¢ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—É–Ω–¥", "addRound")
	btnAddTheme    = menu.Data("üü¢ –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É", "addTheme")
	btnAddQuest    = menu.Data("üü¢ –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "addQuest")
	btnDelRound    = menu.Data("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—É–Ω–¥", "delRound")
	btnDelTheme    = menu.Data("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É", "delTheme")
	btnDelQuest    = menu.Data("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "delQuest")
	btnQuestDef    = menu.Data("üîò –û–±—ã—á–Ω—ã–π", "questDef")
	btnQuestBet    = menu.Data("üé∞ –°–æ —Å—Ç–∞–≤–∫–æ–π", "questBet")
	btnQuestSecret = menu.Data("üîë –° —Å–µ–∫—Ä–µ—Ç–æ–º", "questSec")
	btnPublish     = menu.Data("üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–∞–∫", "publish")
	btnBack        = tele.InlineButton{
		Unique: "back",
		Text:   "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
	}
	btnConfirm = tele.InlineButton{
		Unique: "confirm",
		Text:   "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
		Data:   "",
	}
)

func RegisterButtonHandlers(bot *tele.Bot) {

	bot.Handle(&btnPublish, func(c tele.Context) error {
		saveKeyboard(c.Sender().ID, menu)
		lastMenu := getKeyboard(c.Sender().ID)
		err := validators.IsValidPack(TempPack[c.Sender().ID])
		if err != nil {
			return c.Send(err.Error(), lastMenu)
		}

		grid := utils.BuildTagMenu(TempPack[c.Sender().ID])
		err1 := c.Bot().Delete(c.Message())
		if err1 != nil {
			return err1
		}
		err2 := c.Send("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—ç–≥–∏ –¥–ª—è –ø–∞–∫–∞. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /publish\n‚ö†Ô∏è–ü–û–°–õ–ï –ö–û–ú–ê–ù–î–´ –ü–ê–ö –ù–ï–õ–¨–ó–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨‚ö†Ô∏è", &tele.ReplyMarkup{InlineKeyboard: grid})
		return err2

	})

	bot.Handle(&btnDelQuest, func(c tele.Context) error {
		var keyboard [][]tele.InlineButton
		for _, round := range TempPack[c.Sender().ID].Rounds {
			for _, theme := range round.Themes {
				if len(theme.Quests) != 0 {
					roundName := round.Name
					btn := tele.InlineButton{
						Data: "SR4DQ_" + roundName,
						Text: roundName,
					}
					keyboard = append(keyboard, []tele.InlineButton{btn})
				}
			}

		}
		keyboard = append(keyboard, []tele.InlineButton{btnBack})
		storage.SaveMessage(c.Chat().ID, c.Message().Text, c.Message().ReplyMarkup)
		err1 := c.Bot().Delete(c.Message())
		if err1 != nil {
			return err1
		}
		return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—É–Ω–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", &tele.SendOptions{
			ReplyMarkup: &tele.ReplyMarkup{InlineKeyboard: keyboard},
		})
	})

	bot.Handle(&btnBack, func(c tele.Context) error {
		msg := storage.GetMessage(c.Chat().ID)
		err1 := c.Bot().Delete(c.Message())
		if err1 != nil {
			return err1
		}

		err := c.Send(msg.Text, msg.Keyboard)
		return err
	})

	bot.Handle(&btnAddRound, func(c tele.Context) error {
		defer func() {
			if err := c.Respond(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: %v", err)
			}
		}()
		userState[c.Sender().ID].SetState("add_round")
		_, err := c.Bot().Edit(c.Message(), "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—É–Ω–¥–∞", &tele.ReplyMarkup{})
		return err
	})

	bot.Handle(&btnAddTheme, func(c tele.Context) error {

		var keyboard [][]tele.InlineButton
		for _, round := range TempPack[c.Sender().ID].Rounds {
			roundName := round.Name
			btn := tele.InlineButton{
				Data: "select_round_add_theme_" + roundName,
				Text: roundName,
			}
			keyboard = append(keyboard, []tele.InlineButton{btn})
		}
		storage.SaveMessage(c.Chat().ID, c.Message().Text, c.Message().ReplyMarkup)
		err1 := c.Bot().Delete(c.Message())
		if err1 != nil {
			return err1
		}
		return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—É–Ω–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã", &tele.SendOptions{
			ReplyMarkup: &tele.ReplyMarkup{InlineKeyboard: keyboard},
		})

	})

	bot.Handle(&btnAddQuest, func(c tele.Context) error {
		var keyboard [][]tele.InlineButton
		for _, round := range TempPack[c.Sender().ID].Rounds {

			if len(round.Themes) > 0 {
				roundName := round.Name
				btn := tele.InlineButton{
					Data: "select_round_add_quest_" + roundName,
					Text: roundName,
				}
				keyboard = append(keyboard, []tele.InlineButton{btn})
			}

		}
		storage.SaveMessage(c.Chat().ID, c.Message().Text, c.Message().ReplyMarkup)
		err1 := c.Bot().Delete(c.Message())
		if err1 != nil {
			return err1
		}
		return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—É–Ω–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞", &tele.SendOptions{
			ReplyMarkup: &tele.ReplyMarkup{InlineKeyboard: keyboard},
		})
	})

	bot.Handle(&btnQuestDef, func(c tele.Context) error {
		defer func() {
			if err := c.Respond(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: %v", err)
			}
		}()
		quest := structs.NewQuest("default")
		pos0 := userState[c.Sender().ID].GetPos(0)
		pos1 := userState[c.Sender().ID].GetPos(1)
		pos2 := userState[c.Sender().ID].GetPos(2)

		TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests = append(TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests, quest)
		userState[c.Sender().ID].SetPos(2, len(TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests)-1)
		pos2 = userState[c.Sender().ID].GetPos(2)
		_, err := c.Bot().Edit(c.Message(),
			fmt.Sprintf("üìç –†–∞—É–Ω–¥: %s\n\nüìÇ –¢–µ–º–∞: %s\n\n‚ùì –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: %s\n\n‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞",
				TempPack[c.Sender().ID].Rounds[pos0].Name,
				TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Name,
				questType[TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Type]),
			&tele.ReplyMarkup{})
		userState[c.Sender().ID].SetState("awaiting_price")
		return err
	})

	bot.Handle(&btnQuestBet, func(c tele.Context) error {
		defer func() {
			if err := c.Respond(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: %v", err)
			}
		}()
		quest := structs.NewQuest("bet")
		pos0 := userState[c.Sender().ID].GetPos(0)
		pos1 := userState[c.Sender().ID].GetPos(1)
		pos2 := userState[c.Sender().ID].GetPos(2)
		TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests = append(TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests, quest)
		userState[c.Sender().ID].SetPos(2, len(TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests)-1)
		pos2 = userState[c.Sender().ID].GetPos(2)
		_, err := c.Bot().Edit(c.Message(),
			fmt.Sprintf("üìç –†–∞—É–Ω–¥: %s\n\nüìÇ –¢–µ–º–∞: %s\n\n‚ùì –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: %s\n\n‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞",
				TempPack[c.Sender().ID].Rounds[pos0].Name,
				TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Name,
				questType[TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Type]),
			&tele.ReplyMarkup{})
		userState[c.Sender().ID].SetState("awaiting_price")
		return err
	})

	bot.Handle(&btnQuestSecret, func(c tele.Context) error {
		defer func() {
			if err := c.Respond(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: %v", err)
			}
		}()
		pos0 := userState[c.Sender().ID].GetPos(0)
		pos1 := userState[c.Sender().ID].GetPos(1)
		pos2 := userState[c.Sender().ID].GetPos(2)
		quest := structs.NewQuest("secret")
		TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests = append(TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests, quest)
		userState[c.Sender().ID].SetPos(2, len(TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests)-1)
		pos2 = userState[c.Sender().ID].GetPos(2)
		_, err := c.Bot().Edit(c.Message(), fmt.Sprintf("üìç –†–∞—É–Ω–¥: %s\n\nüìÇ –¢–µ–º–∞: %s\n\n‚ùì –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: %s\n\n‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞",
			TempPack[c.Sender().ID].Rounds[pos0].Name,
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Name,
			questType[TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Type]), &tele.ReplyMarkup{})
		userState[c.Sender().ID].SetState("awaiting_price")
		return err
	})

	bot.Handle(&btnDelRound, func(c tele.Context) error {
		var keyboard [][]tele.InlineButton
		for _, round := range TempPack[c.Sender().ID].Rounds {
			roundName := round.Name
			btn := tele.InlineButton{
				Data: "select_round_btn_del_" + roundName,
				Text: roundName,
			}
			keyboard = append(keyboard, []tele.InlineButton{btn})
		}
		keyboard = append(keyboard, []tele.InlineButton{btnBack})
		storage.SaveMessage(c.Chat().ID, c.Message().Text, c.Message().ReplyMarkup)
		err1 := c.Bot().Delete(c.Message())
		if err1 != nil {
			return err1
		}
		return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—É–Ω–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", &tele.SendOptions{
			ReplyMarkup: &tele.ReplyMarkup{InlineKeyboard: keyboard},
		})
	})

	bot.Handle(&btnDelTheme, func(c tele.Context) error {
		var keyboard [][]tele.InlineButton
		for _, round := range TempPack[c.Sender().ID].Rounds {
			if len(round.Themes) > 0 {
				roundName := round.Name
				btn := tele.InlineButton{
					Data: "SR4DT_" + roundName,
					Text: roundName,
				}
				keyboard = append(keyboard, []tele.InlineButton{btn})
			}
		}
		keyboard = append(keyboard, []tele.InlineButton{btnBack})
		storage.SaveMessage(c.Chat().ID, c.Message().Text, c.Message().ReplyMarkup)
		err1 := c.Bot().Delete(c.Message())
		if err1 != nil {
			return err1
		}
		return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—É–Ω–¥ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É", &tele.SendOptions{
			ReplyMarkup: &tele.ReplyMarkup{InlineKeyboard: keyboard},
		})

	})

	bot.Handle(&btnViewStruct, func(c tele.Context) error {
		defer func() {
			if err := c.Respond(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: %v", err)
			}
		}()

		err1 := c.Bot().Delete(c.Message())
		if err1 != nil {
			return err1
		}

		mess := ""
		if len(savePack.Rounds) != 0 {
			for i, round := range savePack.Rounds {
				mess += fmt.Sprintf("üìå %s:\n", round.Name)
				if len(savePack.Rounds[i].Themes) != 0 {
					for j, theme := range savePack.Rounds[i].Themes {
						mess += fmt.Sprintf("     üìñ%s\n", theme.Name)
						if len(savePack.Rounds[i].Themes[j].Quests) != 0 {
							for _, quest := range savePack.Rounds[i].Themes[j].Quests {
								mess += fmt.Sprintf("           %s\n", questType[quest.Type]+", —Ü–µ–Ω–∞: "+quest.Cost)
							}
						}
					}

				}
			}
		} else {

			return c.Send("‚ùå –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ –í—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è.", getKeyboard(c.Sender().ID))
		}

		return c.Send(fmt.Sprintf("üóÇÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–∫–∞:\n\n%s", mess), getKeyboard(c.Sender().ID))

	})

}
