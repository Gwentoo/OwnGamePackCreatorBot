package handlers

import (
	"OwnGamePack/internal/app/generatePackID"
	"OwnGamePack/internal/app/validators"
	"OwnGamePack/internal/storage"
	"OwnGamePack/internal/structs"
	"fmt"
	tele "gopkg.in/telebot.v3"
	"log"
	"sync"
)

var StorageDB *storage.Storage

var (
	userKeyboards = make(map[int64]*tele.ReplyMarkup)
	keyboardMutex sync.Mutex
)

func saveKeyboard(userID int64, menu *tele.ReplyMarkup) {
	keyboardMutex.Lock()
	defer keyboardMutex.Unlock()
	userKeyboards[userID] = menu
}

func getKeyboard(userID int64) *tele.ReplyMarkup {
	keyboardMutex.Lock()
	defer keyboardMutex.Unlock()
	return userKeyboards[userID]
}

func RegisterCommonHandlers(bot *tele.Bot) {
	bot.Handle("/info", handleInfo)
	bot.Handle("/newpack", handleNewPack)
	bot.Handle("/support", handleSupport)
}

var TempPack = make(map[int64]*structs.Pack, 10)
var userState = make(map[int64]*structs.UserState, 10)

var (
	savePack = structs.NewPack()
	menu     = &tele.ReplyMarkup{}
)

func handleSupport(c tele.Context) error {
	return nil
}

func handleInfo(c tele.Context) error {
	return c.Send(
		"–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–∫–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã \"–°–≤–æ—è –∏–≥—Ä–∞\"\n" +
			"/newpack - –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞–∫–∞\n" +
			//"/edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø\n" +
			"/packs - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –í–∞–º–∏ –ø–∞–∫–æ–≤\n" +
			"/siq - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –í–∞–º–∏ –ø–∞–∫–∞ –≤ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è SiGame\n" +
			"/support - –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º—ã")
}

func handleNewPack(c tele.Context) error {

	btnCancelPack := menu.Data("–û—Ç–º–µ–Ω–∞", "cancelPack")
	btnContinuePack := menu.Data("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "continuePack")
	c.Bot().Handle(&btnContinuePack, func(c tele.Context) error {
		defer func() {
			if err := c.Respond(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: %v", err)
			}
		}()
		newPack := structs.NewPack()
		newUserState := structs.NewUserState()
		TempPack[c.Sender().ID] = &newPack
		TempPack[c.Sender().ID].UserID = c.Sender().ID
		userState[c.Sender().ID] = &newUserState
		userState[c.Sender().ID].SetState("awaiting_pack_name")
		_, err := c.Bot().Edit(c.Message(), "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–∞", &tele.ReplyMarkup{})
		return err
	})
	c.Bot().Handle(&btnCancelPack, func(c tele.Context) error {
		defer func() {
			if err := c.Respond(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: %v", err)
			}
		}()
		_, err := c.Bot().Edit(c.Message(), "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", &tele.ReplyMarkup{})
		return err
	})

	menu.Inline(
		menu.Row(btnCancelPack, btnContinuePack),
	)
	return c.Send("–í—ã –Ω–∞—á–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞–∫–∞", menu)
}

func handlePackName(c tele.Context) error {

	err := validators.IsValidName(c.Text())

	names, err1 := StorageDB.GetPacksName(c.Sender().ID)
	if err1 != nil {
		log.Println(err1)
	}
	for k := range names {
		if c.Text() == k {
			return c.Send("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∞–∫ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
		}
	}

	if err != nil {
		return c.Send(fmt.Sprintf("‚ùå %s\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", err))
	}
	packID, err := generatePackID.GeneratePackID()
	if err != nil {
		return err
	}
	TempPack[c.Sender().ID].PackID = packID
	TempPack[c.Sender().ID].PackName = c.Text()
	TempPack[c.Sender().ID].UserName = "@" + c.Sender().Username
	userState[c.Sender().ID].SetState("add_desc")

	return c.Send("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–∞", &tele.ReplyMarkup{})
}

func handlePackDesc(c tele.Context) error {
	err := validators.IsValidPackDesc(c.Text())
	if err != nil {
		return c.Send(fmt.Sprintf("‚ùå %s\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", err))
	}
	TempPack[c.Sender().ID].PackDesc = c.Text()

	userState[c.Sender().ID].SetState("add_round")
	menu.Inline(
		menu.Row(btnAddRound),
		menu.Row(BtnSaveTmp),
	)
	saveKeyboard(c.Sender().ID, menu)
	return c.Send(fmt.Sprintf("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–∞: '%s'\n–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–∞: '%s'", TempPack[c.Sender().ID].PackName, TempPack[c.Sender().ID].PackDesc), menu)
}

func handleNewRound(c tele.Context) error {

	err := validators.IsValidRoundName(c.Text(), TempPack[c.Sender().ID])
	if err != nil {
		return c.Send(fmt.Sprintf("‚ùå %s\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", err))
	}

	round := structs.NewRound(c.Text())
	TempPack[c.Sender().ID].Rounds = append(TempPack[c.Sender().ID].Rounds, round)
	pos0 := userState[c.Sender().ID].GetPos(0)
	userState[c.Sender().ID].SetPos(0, pos0+1)
	userState[c.Sender().ID].SetPos(1, -1)
	userState[c.Sender().ID].SetPos(2, -1)
	userState[c.Sender().ID].SetState("")

	if TempPack[c.Sender().ID].ThemesCount == 0 {
		menu.Inline(
			menu.Row(btnAddRound, btnDelRound),
			menu.Row(btnAddTheme),
			menu.Row(BtnSaveTmp),
			menu.Row(btnViewStruct),
		)
	} else {
		if TempPack[c.Sender().ID].QuestsCount == 0 {
			menu.Inline(
				menu.Row(btnAddRound, btnDelRound),
				menu.Row(btnAddTheme, btnDelTheme),
				menu.Row(btnAddQuest),
				menu.Row(BtnSaveTmp),
				menu.Row(btnViewStruct),
			)
		} else {
			menu.Inline(
				menu.Row(btnAddRound, btnDelRound),
				menu.Row(btnAddTheme, btnDelTheme),
				menu.Row(btnAddQuest, btnDelQuest),
				menu.Row(BtnSaveTmp),
				menu.Row(btnViewStruct),
				menu.Row(btnPublish),
			)
		}
	}

	saveKeyboard(c.Sender().ID, menu)

	return c.Send(fmt.Sprintf("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—É–Ω–¥ '%s'", c.Text()), menu)

}

func handleNewTheme(c tele.Context) error {

	err := validators.IsValidThemeName(c.Text(), TempPack[c.Sender().ID], userState[c.Sender().ID].GetPos(0))
	if err != nil {
		return c.Send(fmt.Sprintf("‚ùå %s\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", err))
	}

	theme := structs.NewTheme(c.Text())
	pos0 := userState[c.Sender().ID].GetPos(0)
	TempPack[c.Sender().ID].Rounds[pos0].Themes = append(TempPack[c.Sender().ID].Rounds[pos0].Themes, theme)
	pos1 := userState[c.Sender().ID].GetPos(1)
	userState[c.Sender().ID].SetPos(1, pos1+1)
	userState[c.Sender().ID].SetPos(2, -1)
	userState[c.Sender().ID].SetState("")

	if TempPack[c.Sender().ID].QuestsCount == 0 {
		menu.Inline(
			menu.Row(btnAddRound, btnDelRound),
			menu.Row(btnAddTheme, btnDelTheme),
			menu.Row(btnAddQuest),
			menu.Row(BtnSaveTmp),
			menu.Row(btnViewStruct),
		)
	} else {
		menu.Inline(
			menu.Row(btnAddRound, btnDelRound),
			menu.Row(btnAddTheme, btnDelTheme),
			menu.Row(btnAddQuest, btnDelQuest),
			menu.Row(BtnSaveTmp),
			menu.Row(btnViewStruct),
			menu.Row(btnPublish),
		)
	}

	saveKeyboard(c.Sender().ID, menu)
	TempPack[c.Sender().ID].ThemesCount += 1
	return c.Send(fmt.Sprintf("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ–º–∞ '%s' –≤ —Ä–∞—É–Ω–¥ '%s'", c.Text(), TempPack[c.Sender().ID].Rounds[pos0].Name), menu)

}

func handleNewCost(c tele.Context) error {

	err := validators.IsValidCost(c.Text())
	if err != nil {
		return c.Send(fmt.Sprintf("‚ùå %s\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", err))
	}

	userState[c.Sender().ID].SetState("awaiting_quest_disc")
	pos0 := userState[c.Sender().ID].GetPos(0)
	pos1 := userState[c.Sender().ID].GetPos(1)
	pos2 := userState[c.Sender().ID].GetPos(2)
	TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Cost = c.Text()
	return c.Send(
		fmt.Sprintf("üìç –†–∞—É–Ω–¥: %s\n\nüìÇ –¢–µ–º–∞: %s\n\n‚ùì –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: %s\n\nüíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: %s\n\n‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞\n(–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∑–æ–≤–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂—ë–Ω–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ)",
			TempPack[c.Sender().ID].Rounds[pos0].Name,
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Name,
			questType[TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Type],
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Cost,
		))

}

func handleNewQuestDisc(c tele.Context) error {

	err := validators.IsValidQuestDesc(c.Text())
	if err != nil {
		return c.Send(fmt.Sprintf("‚ùå %s\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", err))
	}

	pos0 := userState[c.Sender().ID].GetPos(0)
	pos1 := userState[c.Sender().ID].GetPos(1)
	pos2 := userState[c.Sender().ID].GetPos(2)
	TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Description = c.Text()
	userState[c.Sender().ID].SetState("awaiting_quest_content")

	btnNewText := menu.Data("üìÑ –¢–µ–∫—Å—Ç", "newText")
	btnNewAudio := menu.Data("üéµ –ê—É–¥–∏–æ", "newAudio")
	btnNewVideo := menu.Data("üéûÔ∏è –í–∏–¥–µ–æ", "newVideo")
	btnNewPhoto := menu.Data("üì∑ –§–æ—Ç–æ", "newPhoto")

	c.Bot().Handle(&btnNewText, func(c tele.Context) error {
		defer func() {
			if err := c.Respond(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: %v", err)
			}
		}()
		userState[c.Sender().ID].SetState("awaiting_text")
		TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].ContentType = "text"
		err1 := c.Bot().Delete(c.Message())
		if err1 != nil {
			return err1
		}
		return c.Send("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", &tele.ReplyMarkup{})
	})
	c.Bot().Handle(&btnNewAudio, func(c tele.Context) error {
		defer func() {
			if err := c.Respond(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: %v", err)
			}
		}()
		userState[c.Sender().ID].SetState("awaiting_audio")
		TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].ContentType = "audio"
		err1 := c.Bot().Delete(c.Message())
		if err1 != nil {
			return err1
		}
		return c.Send("üéµ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å (–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –±–æ–ª–µ–µ 20—Å)", &tele.ReplyMarkup{})
	})
	c.Bot().Handle(&btnNewVideo, func(c tele.Context) error {
		defer func() {
			if err := c.Respond(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: %v", err)
			}
		}()
		userState[c.Sender().ID].SetState("awaiting_video")
		TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].ContentType = "video"
		err1 := c.Bot().Delete(c.Message())
		if err1 != nil {
			return err1
		}
		return c.Send("üéûÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å (–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –±–æ–ª–µ–µ 20—Å)", &tele.ReplyMarkup{})
	})
	c.Bot().Handle(&btnNewPhoto, func(c tele.Context) error {
		defer func() {
			if err := c.Respond(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: %v", err)
			}
		}()
		userState[c.Sender().ID].SetState("awaiting_photo")
		TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].ContentType = "photo"
		err1 := c.Bot().Delete(c.Message())
		if err1 != nil {
			return err1
		}
		return c.Send("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", &tele.ReplyMarkup{})
	})

	menu.Inline(
		menu.Row(btnNewText, btnNewAudio),
		menu.Row(btnNewVideo, btnNewPhoto),
	)

	return c.Send(fmt.Sprintf("üìç –†–∞—É–Ω–¥: %s\n\nüìÇ –¢–µ–º–∞: %s\n\n‚ùì –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: %s\n\nüíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: %s\n\nüìã –û–ø–∏—Å–∞–Ω–∏–µ: %s\n\n‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
		TempPack[c.Sender().ID].Rounds[pos0].Name,
		TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Name,
		questType[TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Type],
		TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Cost,
		TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Description,
	),
		menu)

}

func handleNewText(c tele.Context) error {

	pos0 := userState[c.Sender().ID].GetPos(0)
	pos1 := userState[c.Sender().ID].GetPos(1)
	pos2 := userState[c.Sender().ID].GetPos(2)

	TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Text = c.Text()
	userState[c.Sender().ID].SetState("awaiting_answer")
	return c.Send(fmt.Sprintf("üìç –†–∞—É–Ω–¥: %s\n\nüìÇ –¢–µ–º–∞: %s\n\n‚ùì –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: %s\n\nüíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: %s\n\nüìã –û–ø–∏—Å–∞–Ω–∏–µ: %s\n\nüìÑ –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞: %s\n\n ‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å",
		TempPack[c.Sender().ID].Rounds[pos0].Name,
		TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Name,
		questType[TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Type],
		TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Cost,
		TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Description,
		TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Text,
	))
}

func handleNewAnswer(c tele.Context) error {
	pos0 := userState[c.Sender().ID].GetPos(0)
	pos1 := userState[c.Sender().ID].GetPos(1)
	pos2 := userState[c.Sender().ID].GetPos(2)
	TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Answer = c.Text()

	menu.Inline(
		menu.Row(btnAddRound, btnDelRound),
		menu.Row(btnAddTheme, btnDelTheme),
		menu.Row(btnAddQuest, btnDelQuest),
		menu.Row(BtnSaveTmp),
		menu.Row(btnViewStruct),
		menu.Row(btnPublish),
	)
	userState[c.Sender().ID].SetState("")

	switch TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].ContentType {

	case "photo":
		photo := TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Photo
		photo.Caption = fmt.Sprintf("üìç –†–∞—É–Ω–¥: %s\n\nüìÇ –¢–µ–º–∞: %s\n\n‚ùì –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: %s\n\nüíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: %s\n\nüìã –û–ø–∏—Å–∞–Ω–∏–µ: %s\n\nüîç –û—Ç–≤–µ—Ç: %s",
			TempPack[c.Sender().ID].Rounds[pos0].Name,
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Name,
			questType[TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Type],
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Cost,
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Description,
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Answer,
		)
		err1 := c.Send(photo)
		if err1 != nil {
			return err1
		}
	case "video":
		video := TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Video
		video.Caption = fmt.Sprintf("üìç –†–∞—É–Ω–¥: %s\n\nüìÇ –¢–µ–º–∞: %s\n\n‚ùì –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: %s\n\nüíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: %s\n\nüìã –û–ø–∏—Å–∞–Ω–∏–µ: %s\n\nüîç –û—Ç–≤–µ—Ç: %s",
			TempPack[c.Sender().ID].Rounds[pos0].Name,
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Name,
			questType[TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Type],
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Cost,
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Description,
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Answer,
		)
		err1 := c.Send(video)
		if err1 != nil {
			return err1
		}
	case "audio":
		audio := TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Audio
		audio.Caption = fmt.Sprintf("üìç –†–∞—É–Ω–¥: %s\n\nüìÇ –¢–µ–º–∞: %s\n\n‚ùì –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: %s\n\nüíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: %s\n\nüìã –û–ø–∏—Å–∞–Ω–∏–µ: %s\n\nüîç –û—Ç–≤–µ—Ç: %s",
			TempPack[c.Sender().ID].Rounds[pos0].Name,
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Name,
			questType[TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Type],
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Cost,
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Description,
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Answer,
		)
		err1 := c.Send(audio)
		if err1 != nil {
			return err1
		}
	default:
		text := TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Text

		err1 := c.Send(fmt.Sprintf("üìç –†–∞—É–Ω–¥: %s\n\nüìÇ –¢–µ–º–∞: %s\n\n‚ùì –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: %s\n\nüíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: %s\n\nüìã –û–ø–∏—Å–∞–Ω–∏–µ: %s\n\nüìÑ –í–æ–ø—Ä–æ—Å: %s\n\nüîç –û—Ç–≤–µ—Ç: %s",
			TempPack[c.Sender().ID].Rounds[pos0].Name,
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Name,
			questType[TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Type],
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Cost,
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Description,
			text,
			TempPack[c.Sender().ID].Rounds[pos0].Themes[pos1].Quests[pos2].Answer))
		if err1 != nil {
			return err1
		}
	}

	saveKeyboard(c.Sender().ID, menu)
	TempPack[c.Sender().ID].QuestsCount += 1
	return c.Send("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω", menu)
}
